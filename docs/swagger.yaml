basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Category:
    properties:
      id:
        type: integer
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      name:
        type: string
    type: object
  models.Genre:
    properties:
      id:
        type: integer
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      name:
        type: string
    type: object
  models.Movie:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      description:
        type: string
      director:
        type: string
      episodes:
        type: integer
      genres:
        items:
          $ref: '#/definitions/models.Genre'
        type: array
      id:
        type: integer
      logo:
        type: string
      minutes:
        type: integer
      producer:
        type: string
      screenshots:
        items:
          type: string
        type: array
      seasons:
        type: integer
      title:
        type: string
      type:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
      year:
        type: string
    type: object
  models.User:
    properties:
      birthdate:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      movies:
        items:
          $ref: '#/definitions/models.Movie'
        type: array
      name:
        type: string
      password:
        type: string
      phone:
        type: integer
      role:
        type: string
      updatedAt:
        type: string
    type: object
  transport.errorResponse:
    properties:
      error:
        type: string
    type: object
  transport.regCredentials:
    properties:
      email:
        type: string
      password:
        type: string
      repeated_password:
        type: string
    type: object
  transport.tokenResponse:
    properties:
      token:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact: {}
  description: Api for ozinse application.
  termsOfService: http://swagger.io/terms/
  title: Ozinse API
  version: "1.0"
paths:
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided email and password
      parameters:
      - description: Registration credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transport.regCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/transport.tokenResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/transport.errorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
